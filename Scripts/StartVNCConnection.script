params platform, device, app

(* load config file please make a copy of the config.example.json to configure your envrionment*)
put JSONValue (file ResourcePath("config.json")) into config

(* Set the parameters to match the environment*)
set pathToEpgw to config.path // Please ensure it ends with / this must be the path to the epgw executable
set name to config.name
set user to config.user
set apiKey to config.apiKey
set datacenter to config.dataCenter //input your own data center
set platformName to platform //OS selection - iOS
set deviceName to device //Device Selection - iPhone.*
if app is not empty then set appPath to app //Path to the application, if not needed please ensure it is left empty

Log "create the SUT reservation"
(* Set the shell command in a single line - create the SUT reservation*)

if OSInfo().ProductName contains "Mac" then
	set cmd to !<<[[pathToEpgw]]epgw add sauce-device --name [[name]] --user [[user]] --apiKey [[apiKey]] --dataCenter [[datacenter]] --platformName [[platformName]] --deviceName "[[deviceName]]">>
end if //Linux

if OSInfo().ProductName contains "Windows" then
	set cmd to !<<[[pathToEpgw]]epgw.exe add sauce-device --name [[name]] --user [[user]] --apiKey [[apiKey]] --dataCenter [[datacenter]] --platformName [[platformName]] --deviceName "[[deviceName]]">>
end if //Windows

if app is not empty then set cmd to cmd && !<<--path "[[appPath]]">>

Log cmd

Shell(cmd)

put the result into MyRes
(* Trigger an error if we do not get the expected return of 0 *)
Assert that MyRes = 0

Log "Create the VNC connection for the Gateway - run it async to not lock the script / output log to the path"
(* Create the VNC connection for the Gateway *)

Shell(!"nohup [[pathToEpgw]]epgw vnc [[name]] >> [[pathToEpgw]]output.log &")

put the result into MyRes
Log MyRes

(* Let the Gateway starting give it 5 seconds *)
wait 5

(* Check the logs for  confirming that the Device is trying to connect*)
Shell(!"tail -2 [[pathToEpgw]]output.log")
put the result into MyRes
Assert that item 2 of MyRes contains "Connecting to your device"

(* Check when the vnc server is started *)
Log 
repeat until item 2 of MyRes contains "Listening at port 5900"
	Shell(!"tail -2 [[pathToEpgw]]output.log")
	put the result into MyRes
	Log "waiting for the vnc server to start"
	wait 5
	
	if the repeatindex is greater than 60 // Timeout set to 5min
		throw "the device took too long. Do not forget to kill the Gateway"
	end if
end repeat

Log "VNC Server started, the script can be started"

Shell(!"rm [[pathToEpgw]]output.log")

